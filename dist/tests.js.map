{"version":3,"sources":["../test/rollingRateLimiter.js"],"names":["delay","Promise","setTimeout","describe","it","limiter","interval","expect","tokensPerInterval","removedTokens","getTokens","tokens"],"mappings":"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","sourcesContent":["import chai from 'chai'\nconst expect = chai.expect\n\nimport RollingRateLimiter from '../dist'\n\nconst delay =  (ms) => new Promise((resolve) => setTimeout(() => resolve(), ms))\n\ndescribe(\"Constructor\", function () {\n  it('should create a new instance', function () {\n    const limiter = new RollingRateLimiter({ tokensPerInterval: 10, interval: 10 * 1000 })\n    expect(limiter).to.be.an.instanceOf(RollingRateLimiter)\n  })\n})\n\ndescribe(\"getTokens()\", function () {\n  it('should return correct number of tokens', function () {\n    const limiter = new RollingRateLimiter({tokensPerInterval: 10, interval: 10 * 1000 })\n    expect(limiter.getTokens()).to.be.equal(10)\n  })\n})\n\ndescribe(\"tryRemoveTokens()\", function () {\n  it('should remove correct number of tokens', function () {\n    const limiter = new RollingRateLimiter({tokensPerInterval: 10, interval: 10 * 1000 })\n    let removedTokens = limiter.tryRemoveTokens(2)\n    expect(removedTokens).to.be.equal(true)\n    expect(limiter.getTokens()).to.be.equal(8)\n\n    removedTokens = limiter.tryRemoveTokens(20)\n    expect(removedTokens).to.be.equal(false)\n    expect(limiter.getTokens()).to.be.equal(8)\n\n    removedTokens = limiter.tryRemoveTokens(0)\n    expect(removedTokens).to.be.equal(true)\n    expect(limiter.getTokens()).to.be.equal(8)\n  })\n})\n\ndescribe(\"awaitTokens()\", function () {\n  it('should await right number of tokens', async function () {\n    const limiter = new RollingRateLimiter({tokensPerInterval: 10, interval: 1000 })\n    let removedTokens = limiter.tryRemoveTokens(2)\n    expect(removedTokens).to.be.equal(true)\n    expect(limiter.getTokens()).to.be.equal(8)\n\n    await delay(100)\n    removedTokens = limiter.tryRemoveTokens(8)\n    expect(removedTokens).to.be.equal(true)\n    expect(limiter.getTokens()).to.be.equal(0)\n\n    await delay(800)\n    expect(limiter.getTokens()).to.be.equal(0)\n\n    let tokens = await limiter.awaitTokens(2)\n    expect(limiter.getTokens()).to.be.equal(2)\n    expect(tokens).to.be.equal(2)\n\n\n    tokens = await limiter.awaitTokens(8)\n    expect(limiter.getTokens()).to.be.equal(10)\n    expect(tokens).to.be.equal(10)\n  })\n})\n\n"],"file":"tests.js"}