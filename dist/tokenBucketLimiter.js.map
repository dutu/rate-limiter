{"version":3,"sources":["../src/tokenBucketLimiter.mjs"],"names":["RateLimiter","constructor","interval","tokensPerInterval","Date","now","lastDrip","deltaMs","Math","tokensToAdd","count","tokensNeeded"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,YAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA;;;;;;;;IAEe,kB;;;;;AACbC,oCAA0D;AAAA;;AAAA,QAA7C,UAA6C,QAA7C,UAA6C;AAAA,QAA7C,iBAA6C,QAA7C,iBAA6C;AAAA,QAAZC,QAAY,QAAZA,QAAY;;AAAA;;AACxD,8BAAM;AAAEC,MAAAA,iBAAF,EAAEA,iBAAF;AAAqBD,MAAAA,QAAAA,EAAAA;AAArB,KAAN;AAEA,UAAA,UAAA,GAHwD,UAGxD,CAHwD,CAKxD;;AACA,UAAA,MAAA,GAAc,MAN0C,UAMxD,CANwD,CAQxD;;AACA,UAAA,eAAA,GAAuB,CAACE,IAAI,CAA5B,GAAwBA,EAAD,CAAvB;AATwD;AAWzD;;;;iCAEY;AACX,UAAMC,GAAG,GAAGD,IAAI,CAAhB,GAAYA,EAAZ;AACA,UAAME,QAAQ,GAAG,KAAA,eAAA,CAAjB,CAAiB,CAAjB;AACA,UAAIC,OAAO,GAAGC,IAAI,CAAJA,GAAAA,CAASH,GAAG,GAAZG,QAAAA,EAAd,CAAcA,CAAd;AACA,WAAA,eAAA,GAAuB,CAAvB,GAAuB,CAAvB;AACA,UAAMC,WAAW,GAAGF,OAAO,IAAI,KAAA,iBAAA,GAAyB,KAAxD,QAA2B,CAA3B;AACA,WAAA,MAAA,GAAcC,IAAI,CAAJA,GAAAA,CAAS,KAAA,MAAA,GAATA,WAAAA,EAAoC,KAAlD,UAAcA,CAAd;AACA,aAAOA,IAAI,CAAJA,KAAAA,CAAW,KAAlB,MAAOA,CAAP;AACD;;;wCAE4B;AAAA,UAAXE,KAAW,uEAAZ,CAAY;;AAC3B,UAAIA,KAAK,GAAG,KAAZ,UAAA,EAA6B;AAC3B,cAAM,IAAA,KAAA,yBAA2BA,KAA3B,kDAAwE,KAA9E,UAAM,EAAN;AACD;;AAED,WAAA,UAAA;AACA,UAAIC,YAAY,GAAGD,KAAK,GAAG,KAA3B,MAAA;;AACA,UAAIC,YAAY,IAAhB,CAAA,EAAuB;AACrB,eAAA,CAAA;AACD;;AAED,aAAOH,IAAI,CAAJA,IAAAA,CAAUG,YAAY,IAAI,KAAA,QAAA,GAAgB,KAAjD,iBAA6B,CAAtBH,CAAP;AACD;;;;EApC6CR,YAAjC,W","sourcesContent":["import RateLimiter from './rateLimiter.mjs'\r\n\r\nexport default class TokenBucketLimiter extends RateLimiter {\r\n  constructor ({ bucketSize, tokensPerInterval, interval }) {\r\n    super({ tokensPerInterval, interval })\r\n\r\n    this.bucketSize = bucketSize\r\n\r\n    // we start with the bucket full\r\n    this.tokens = this.bucketSize\r\n\r\n    // last drip\r\n    this.tokensRemovedAt = [Date.now()]\r\n\r\n  }\r\n\r\n  dripTokens() {\r\n    const now = Date.now()\r\n    const lastDrip = this.tokensRemovedAt[0]\r\n    let deltaMs = Math.max(now - lastDrip, 0)\r\n    this.tokensRemovedAt = [now]\r\n    const tokensToAdd = deltaMs * (this.tokensPerInterval / this.interval)\r\n    this.tokens = Math.min(this.tokens + tokensToAdd, this.bucketSize)\r\n    return Math.floor(this.tokens)\r\n  }\r\n\r\n  getDelayForTokens(count = 1) {\r\n    if (count > this.bucketSize) {\r\n      throw new Error(`Cannot supply ${count} tokens at once (max is bucketSize = ${this.bucketSize}`)\r\n    }\r\n\r\n    this.dripTokens()\r\n    let tokensNeeded = count - this.tokens\r\n    if (tokensNeeded <= 0) {\r\n      return 0\r\n    }\r\n\r\n    return Math.ceil(tokensNeeded * (this.interval / this.tokensPerInterval))\r\n  }\r\n}\r\n"],"file":"tokenBucketLimiter.js"}