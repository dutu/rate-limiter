{"version":3,"sources":["tokenBucketLimiter.js"],"names":["TokenBucketLimiter","bucketSize","tokensPerInterval","interval","tokens","tokensRemovedAt","Date","now","lastDrip","deltaMs","Math","max","tokensToAdd","min","floor","count","Error","dripTokens","tokensNeeded","ceil","RateLimiter"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;IACaA,kB;;;;;AACX,oCAIG;AAAA;;AAAA,QAHDC,UAGC,QAHDA,UAGC;AAAA,QAFDC,iBAEC,QAFDA,iBAEC;AAAA,QADDC,QACC,QADDA,QACC;;AAAA;;AACD,8BAAM;AACJD,MAAAA,iBAAiB,EAAjBA,iBADI;AAEJC,MAAAA,QAAQ,EAARA;AAFI,KAAN;AAIA,UAAKF,UAAL,GAAkBA,UAAlB,CALC,CAK6B;;AAE9B,UAAKG,MAAL,GAAc,MAAKH,UAAnB,CAPC,CAO8B;;AAE/B,UAAKI,eAAL,GAAuB,CAACC,IAAI,CAACC,GAAL,EAAD,CAAvB;AATC;AAUF;;;;WAED,sBAAa;AACX,UAAMA,GAAG,GAAGD,IAAI,CAACC,GAAL,EAAZ;AACA,UAAMC,QAAQ,GAAG,KAAKH,eAAL,CAAqB,CAArB,CAAjB;AACA,UAAII,OAAO,GAAGC,IAAI,CAACC,GAAL,CAASJ,GAAG,GAAGC,QAAf,EAAyB,CAAzB,CAAd;AACA,WAAKH,eAAL,GAAuB,CAACE,GAAD,CAAvB;AACA,UAAMK,WAAW,GAAGH,OAAO,IAAI,KAAKP,iBAAL,GAAyB,KAAKC,QAAlC,CAA3B;AACA,WAAKC,MAAL,GAAcM,IAAI,CAACG,GAAL,CAAS,KAAKT,MAAL,GAAcQ,WAAvB,EAAoC,KAAKX,UAAzC,CAAd;AACA,aAAOS,IAAI,CAACI,KAAL,CAAW,KAAKV,MAAhB,CAAP;AACD;;;WAED,6BAA6B;AAAA,UAAXW,KAAW,uEAAH,CAAG;;AAC3B,UAAIA,KAAK,GAAG,KAAKd,UAAjB,EAA6B;AAC3B,cAAM,IAAIe,KAAJ,yBAA2BD,KAA3B,kDAAwE,KAAKd,UAA7E,EAAN;AACD;;AAED,WAAKgB,UAAL;AACA,UAAIC,YAAY,GAAGH,KAAK,GAAG,KAAKX,MAAhC;;AAEA,UAAIc,YAAY,IAAI,CAApB,EAAuB;AACrB,eAAO,CAAP;AACD;;AAED,aAAOR,IAAI,CAACS,IAAL,CAAUD,YAAY,IAAI,KAAKf,QAAL,GAAgB,KAAKD,iBAAzB,CAAtB,CAAP;AACD;;;WAED,iBAAQ;AACN,WAAKE,MAAL,GAAc,KAAKH,UAAnB;AACA,WAAKI,eAAL,GAAuB,CAACC,IAAI,CAACC,GAAL,EAAD,CAAvB;AACD;;;;EA7CqCa,uB","sourcesContent":["import RateLimiter from './rateLimiter.js';\nexport class TokenBucketLimiter extends RateLimiter {\n  constructor({\n    bucketSize,\n    tokensPerInterval,\n    interval\n  }) {\n    super({\n      tokensPerInterval,\n      interval\n    });\n    this.bucketSize = bucketSize; // we start with the bucket full\n\n    this.tokens = this.bucketSize; // last drip\n\n    this.tokensRemovedAt = [Date.now()];\n  }\n\n  dripTokens() {\n    const now = Date.now();\n    const lastDrip = this.tokensRemovedAt[0];\n    let deltaMs = Math.max(now - lastDrip, 0);\n    this.tokensRemovedAt = [now];\n    const tokensToAdd = deltaMs * (this.tokensPerInterval / this.interval);\n    this.tokens = Math.min(this.tokens + tokensToAdd, this.bucketSize);\n    return Math.floor(this.tokens);\n  }\n\n  getDelayForTokens(count = 1) {\n    if (count > this.bucketSize) {\n      throw new Error(`Cannot supply ${count} tokens at once (max is bucketSize = ${this.bucketSize}`);\n    }\n\n    this.dripTokens();\n    let tokensNeeded = count - this.tokens;\n\n    if (tokensNeeded <= 0) {\n      return 0;\n    }\n\n    return Math.ceil(tokensNeeded * (this.interval / this.tokensPerInterval));\n  }\n\n  reset() {\n    this.tokens = this.bucketSize;\n    this.tokensRemovedAt = [Date.now()];\n  }\n\n}"],"file":"tokenBucketLimiter.js"}