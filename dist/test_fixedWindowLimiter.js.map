{"version":3,"file":"test_fixedWindowLimiter.js","mappings":";;AAAA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAFA,IAAMA,MAAM,GAAGC,iBAAfD;;AAIA,IAAME,KAAK,GAAI,SAATA,KAAS;EAAA,OAAQ,YAAY;IAAA,OAAaC,UAAU,CAAC;MAAA,OAAMC,OAAN;IAAD,GAAvBC,EAAuB,CAAvB;EAAZ,EAAR;AAAf;;AAEAC,QAAQ,gBAAgB,YAAY;EAClCC,EAAE,iCAAiC,YAAY;IAC7C,IAAMC,OAAO,GAAG,IAAIC,OAAJA,mBAAuB;MAAEC,iBAAiB,EAAnB;MAAyBC,QAAQ,EAAE,KAAK;IAAxC,CAAvB,CAAhB;IACAX,MAAM,CAANA,OAAM,CAANA,qBAAoCS,OAApCT;EAFA,EAAFO;AADM,EAARD;AAOAA,QAAQ,gBAAgB,YAAY;EAClCC,EAAE,2CAA2C,YAAY;IACvD,IAAMC,OAAO,GAAG,IAAIC,OAAJA,mBAAuB;MAACC,iBAAiB,EAAlB;MAAwBC,QAAQ,EAAE,KAAK;IAAvC,CAAvB,CAAhB;IACAX,MAAM,CAACQ,OAAO,CAAdR,SAAOQ,EAAD,CAANR;EAFA,EAAFO;AADM,EAARD;AAOAA,QAAQ,sBAAsB,YAAY;EACxCC,EAAE,2CAA2C,YAAY;IACvD,IAAMC,OAAO,GAAG,IAAIC,OAAJA,mBAAuB;MAACC,iBAAiB,EAAlB;MAAwBC,QAAQ,EAAE,KAAK;IAAvC,CAAvB,CAAhB;IACA,IAAIC,aAAa,GAAGJ,OAAO,CAAPA,gBAApB,CAAoBA,CAApB;IACAR,MAAM,CAANA,aAAM,CAANA;IACAA,MAAM,CAACQ,OAAO,CAAdR,SAAOQ,EAAD,CAANR;IAEAY,aAAa,GAAGJ,OAAO,CAAPA,gBAAhBI,EAAgBJ,CAAhBI;IACAZ,MAAM,CAANA,aAAM,CAANA;IACAA,MAAM,CAACQ,OAAO,CAAdR,SAAOQ,EAAD,CAANR;IAEAY,aAAa,GAAGJ,OAAO,CAAPA,gBAAhBI,CAAgBJ,CAAhBI;IACAZ,MAAM,CAANA,aAAM,CAANA;IACAA,MAAM,CAACQ,OAAO,CAAdR,SAAOQ,EAAD,CAANR;EAZA,EAAFO;AADM,EAARD;AAiBAA,QAAQ,kBAAkB,YAAY;EACpCC,EAAE,6GAAwC;IAAA;IAAA;MAAA;QAAA;UAAA;YAClCC,OADkC,GACxB,IAAIC,OAAJA,mBAAuB;cAACC,iBAAiB,EAAlB;cAAwBC,QAAQ,EAAE;YAAlC,CAAvB,CAAVH;YACFI,aAFoC,GAEpBJ,OAAO,CAAPA,gBAFoB,CAEpBA,CAAhBI;YACJZ,MAAM,CAANA,aAAM,CAANA;YACAA,MAAM,CAACQ,OAAO,CAAdR,SAAOQ,EAAD,CAANR;YAJwCa;YAAA,OAMlCX,KAAK,CAN6B,GAM7B,CAN6B;;UAAA;YAOxCU,aAAa,GAAGJ,OAAO,CAAPA,gBAAhBI,CAAgBJ,CAAhBI;YACAZ,MAAM,CAANA,aAAM,CAANA;YACAA,MAAM,CAACQ,OAAO,CAAdR,SAAOQ,EAAD,CAANR;YATwCa;YAAA,OAWlCX,KAAK,CAX6B,GAW7B,CAX6B;;UAAA;YAYxCF,MAAM,CAACQ,OAAO,CAAdR,SAAOQ,EAAD,CAANR;YAZwCa;YAAA,OAcrBL,OAAO,CAAPA,YAdqB,CAcrBA,CAdqB;;UAAA;YAcpCM,MAdoC,gBAcpCA;YACJd,MAAM,CAACQ,OAAO,CAAdR,SAAOQ,EAAD,CAANR;YACAA,MAAM,CAANA,MAAM,CAANA;;UAhBwC;UAAA;YAAA;QAAA;MAAA;IAAA;EAAxC,IAAFO;AADM,EAARD","names":["expect","chai","delay","setTimeout","resolve","ms","describe","it","limiter","FixedWindowLimiter","tokensPerInterval","interval","removedTokens","_context","tokens"],"sources":["../test/test_fixedWindowLimiter.js"],"sourcesContent":["import chai from 'chai'\nconst expect = chai.expect\n\nimport { FixedWindowLimiter } from '../index.mjs'\n\nconst delay =  (ms) => new Promise((resolve) => setTimeout(() => resolve(), ms))\n\ndescribe(\"Constructor\", function () {\n  it('should create a new instance', function () {\n    const limiter = new FixedWindowLimiter({ tokensPerInterval: 10, interval: 10 * 1000 })\n    expect(limiter).to.be.an.instanceOf(FixedWindowLimiter)\n  })\n})\n\ndescribe(\"getTokens()\", function () {\n  it('should return correct number of tokens', function () {\n    const limiter = new FixedWindowLimiter({tokensPerInterval: 10, interval: 10 * 1000 })\n    expect(limiter.getTokens()).to.be.equal(10)\n  })\n})\n\ndescribe(\"tryRemoveTokens()\", function () {\n  it('should remove correct number of tokens', function () {\n    const limiter = new FixedWindowLimiter({tokensPerInterval: 10, interval: 10 * 1000 })\n    let removedTokens = limiter.tryRemoveTokens(2)\n    expect(removedTokens).to.be.equal(true)\n    expect(limiter.getTokens()).to.be.equal(8)\n\n    removedTokens = limiter.tryRemoveTokens(20)\n    expect(removedTokens).to.be.equal(false)\n    expect(limiter.getTokens()).to.be.equal(8)\n\n    removedTokens = limiter.tryRemoveTokens(0)\n    expect(removedTokens).to.be.equal(true)\n    expect(limiter.getTokens()).to.be.equal(8)\n  })\n})\n\ndescribe(\"awaitTokens()\", function () {\n  it('should await right number of tokens', async function () {\n    const limiter = new FixedWindowLimiter({tokensPerInterval: 10, interval: 1000 })\n    let removedTokens = limiter.tryRemoveTokens(2)\n    expect(removedTokens).to.be.equal(true)\n    expect(limiter.getTokens()).to.be.equal(8)\n\n    await delay(100)\n    removedTokens = limiter.tryRemoveTokens(8)\n    expect(removedTokens).to.be.equal(true)\n    expect(limiter.getTokens()).to.be.equal(0)\n\n    await delay(800)\n    expect(limiter.getTokens()).to.be.equal(0)\n\n    let tokens = await limiter.awaitTokens(8)\n    expect(limiter.getTokens()).to.be.equal(10)\n    expect(tokens).to.be.equal(10)\n  })\n})\n\n"]}