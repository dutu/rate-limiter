{"version":3,"file":"fixedWindowLimiter.js","mappings":";;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IACaA,kB;;;;;EACX,kCAIG;IAAA;;IAAA,IAHDC,iBAGC,QAHDA,iBAGC;IAAA,IAFDC,QAEC,QAFDA,QAEC;IAAA,wBADDC,OACC;IAAA,IADDA,OACC,6BADS,KACT;;IAAAC;;IACDC,0BAAM;MACJJ,iBAAiB,EAAjBA,iBADI;MAEJC,QAAQ,EAARA,QAFI;MAGJC,OAAO,EAAPA;IAHI,CAAN;IAKAE,MAAKC,UAAL,GAAkB,CAAlB;IANC;EAOF;;;;WAED,sBAAa;MACX,IAAI,KAAKC,UAAT,EAAqB;QACnB;MACD;;MAED,KAAKC,eAAL,GAAuB,EAAvB;;MAEA,IAAIC,IAAI,CAACC,GAALD,MAAc,KAAKH,UAAvB,EAAmC;QACjC,KAAKK,MAAL,GAAc,KAAKV,iBAAnB;QACA,KAAKK,UAAL,GAAkBG,IAAI,CAACC,GAALD,KAAa,KAAKP,QAApC;MACD;;MAED,OAAO,KAAKS,MAAZ;IACD;;;WAED,6BAA6B;MAAA,IAAXC,KAAW,uEAAH,CAAG;;MAC3B,IAAIA,KAAK,GAAG,KAAKX,iBAAjB,EAAoC;QAClC,MAAM,IAAIY,KAAJ,yBAA2BD,KAA3B,yDAA+E,KAAKX,iBAApF,EAAN;MACD;;MAED,KAAKa,UAAL;;MAEA,IAAIF,KAAK,IAAI,KAAKD,MAAlB,EAA0B;QACxB,OAAO,CAAP;MACD;;MAED,IAAI,KAAKJ,UAAT,EAAqB;QACnB,OAAOQ,SAAP;MACD;;MAED,OAAO,KAAKT,UAAL,GAAkBG,IAAI,CAACC,GAALD,EAAzB;IACD;;;WAED,iBAAQ;MACNO;;MACA,KAAKF,UAAL;IACD;;;WAED,iBAAQ;MACN,KAAKP,UAAL,GAAkB,KAAlB;MACA,KAAKD,UAAL,GAAkB,CAAlB;MACA,KAAKQ,UAAL;;MACAE;IACD;;;;EAzDqCC,uB","names":["FixedWindowLimiter","tokensPerInterval","interval","stopped","_classCallCheck","_this","nextDripAt","_isStopped","tokensRemovedAt","Date","now","tokens","count","Error","dripTokens","undefined","_get","RateLimiter"],"sources":["fixedWindowLimiter.js"],"sourcesContent":["import RateLimiter from './rateLimiter.js';\nexport class FixedWindowLimiter extends RateLimiter {\n  constructor({\n    tokensPerInterval,\n    interval,\n    stopped = false\n  }) {\n    super({\n      tokensPerInterval,\n      interval,\n      stopped\n    });\n    this.nextDripAt = 0;\n  }\n\n  dripTokens() {\n    if (this._isStopped) {\n      return;\n    }\n\n    this.tokensRemovedAt = [];\n\n    if (Date.now() >= this.nextDripAt) {\n      this.tokens = this.tokensPerInterval;\n      this.nextDripAt = Date.now() + this.interval;\n    }\n\n    return this.tokens;\n  }\n\n  getDelayForTokens(count = 1) {\n    if (count > this.tokensPerInterval) {\n      throw new Error(`Cannot supply ${count} tokens at once (max is tokensPerInterval = ${this.tokensPerInterval}`);\n    }\n\n    this.dripTokens();\n\n    if (count <= this.tokens) {\n      return 0;\n    }\n\n    if (this._isStopped) {\n      return undefined;\n    }\n\n    return this.nextDripAt - Date.now();\n  }\n\n  start() {\n    super.start();\n    this.dripTokens();\n  }\n\n  reset() {\n    this._isStopped = false;\n    this.nextDripAt = 0;\n    this.dripTokens();\n    super.reset();\n  }\n\n}"]}