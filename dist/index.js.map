{"version":3,"sources":["../src/index.js"],"names":["constructor","interval","now","Date","count","tokens","tokensNeeded","newTokens","delayMs","delay","resolve","setTimeout"],"mappings":"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","sourcesContent":["export default class RollingRateLimiter {\n  constructor ({ tokensPerInterval, interval }) {\n    this.tokensPerInterval = tokensPerInterval\n    if (typeof interval === 'string') {\n      switch (interval) {\n        case 'sec':\n        case 'second': {\n          this.interval = 1000\n          break\n        }\n\n        case 'min':\n        case 'minute': {\n          this.interval = 1000 * 60\n          break\n\n        }\n\n        case 'hr':\n        case 'hour': {\n          this.interval = 1000 * 60 * 60\n          break\n        }\n\n        case 'day':\n        {\n          this.interval = 1000 * 60 * 60 * 24\n          break\n        }\n\n        default:\n          throw new Error('Invalid interval ' + interval);\n      }\n    } else {\n      this.interval = interval\n    }\n\n    this.tokens = this.interval\n    this.tokensRemovedAt = []\n  }\n\n  getTokens() {\n    const now = Date.now()\n    while (this.tokensRemovedAt.length > 0) {\n      if (this.tokensRemovedAt[0][0] + this.interval > now) {\n        break\n      }\n\n      this.tokens += this.tokensRemovedAt[0][1]\n      this.tokensRemovedAt.shift()\n    }\n\n    if (this.tokens > this.tokensPerInterval) {\n      this.tokens = this.tokensPerInterval\n    }\n\n    return this.tokens\n  }\n\n\n  tryRemoveTokens(count) {\n    if (count > this.tokensPerInterval) return false\n\n    this.getTokens()\n\n    if (count > this.tokens) return false\n\n    this.tokens -= count\n    this.tokensRemovedAt.push([Date.now(), count])\n    return true\n  }\n\n\n  async awaitTokens(count = 1) {\n    if (count > this.tokensPerInterval) {\n      throw new Error(`Cannot supply ${count} tokens`)\n    }\n\n    let tokens = this.getTokens()\n    let tokensNeeded = count - tokens\n\n    if(tokensNeeded <= 0) {\n      return tokens\n    }\n\n    const now  = Date.now()\n    let delay\n    for (const newTokens of this.tokensRemovedAt) {\n      tokensNeeded -= newTokens[1]\n      if (tokensNeeded <= 0) {\n        const delayMs = newTokens[0] + this.interval - now\n        delay =  new Promise((resolve) => setTimeout(() => resolve(), delayMs))\n        break\n      }\n    }\n\n    await delay\n    return this.getTokens()\n  }\n}\n"],"file":"index.js"}