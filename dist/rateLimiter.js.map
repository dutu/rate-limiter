{"version":3,"sources":["rateLimiter.js"],"names":["RateLimiter","tokensPerInterval","interval","Error","tokensRemovedAt","dripTokens","Math","floor","tokens","count","push","Date","now","delayMs","getDelayForTokens","Promise","resolve","setTimeout","awaitTokens"],"mappings":";;;;;;;;;;;;;;;;;IAAqBA,W;AACnB,6BAGG;AAAA,QAFDC,iBAEC,QAFDA,iBAEC;AAAA,QADDC,QACC,QADDA,QACC;;AAAA;;AACD,SAAKD,iBAAL,GAAyBA,iBAAzB;;AAEA,QAAI,OAAOC,QAAP,KAAoB,QAAxB,EAAkC;AAChC,cAAQA,QAAR;AACE,aAAK,KAAL;AACA,aAAK,QAAL;AACE;AACE,iBAAKA,QAAL,GAAgB,IAAhB;AACA;AACD;;AAEH,aAAK,KAAL;AACA,aAAK,QAAL;AACE;AACE,iBAAKA,QAAL,GAAgB,OAAO,EAAvB;AACA;AACD;;AAEH,aAAK,IAAL;AACA,aAAK,MAAL;AACE;AACE,iBAAKA,QAAL,GAAgB,OAAO,EAAP,GAAY,EAA5B;AACA;AACD;;AAEH,aAAK,KAAL;AACE;AACE,iBAAKA,QAAL,GAAgB,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjC;AACA;AACD;;AAEH;AACE,gBAAM,IAAIC,KAAJ,CAAU,sBAAsBD,QAAhC,CAAN;AA7BJ;AA+BD,KAhCD,MAgCO;AACL,WAAKA,QAAL,GAAgBA,QAAhB;AACD;;AAED,SAAKE,eAAL,GAAuB,EAAvB;AACD;;;;WAED,sBAAa;AACX,YAAM,IAAID,KAAJ,gCAAN;AACD;;;WAED,6BAAoB;AAClB,YAAM,IAAIA,KAAJ,uCAAN;AACD;;;WAED,qBAAY;AACV,WAAKE,UAAL;AACA,aAAOC,IAAI,CAACC,KAAL,CAAW,KAAKC,MAAhB,CAAP;AACD;;;WAED,yBAAgBC,KAAhB,EAAuB;AACrB,WAAKJ,UAAL;AACA,UAAII,KAAK,GAAG,KAAKD,MAAjB,EAAyB,OAAO,KAAP;AACzB,WAAKA,MAAL,IAAeC,KAAf;AACA,WAAKL,eAAL,CAAqBM,IAArB,CAA0B,CAACC,IAAI,CAACC,GAAL,EAAD,EAAaH,KAAb,CAA1B;AACA,aAAO,IAAP;AACD;;;;iFAED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkBA,gBAAAA,KAAlB,2DAA0B,CAA1B;AACMI,gBAAAA,OADN,GACgB,KAAKC,iBAAL,CAAuBL,KAAvB,CADhB;;AAAA,sBAGMI,OAAO,KAAK,CAHlB;AAAA;AAAA;AAAA;;AAAA,iDAIWP,IAAI,CAACC,KAAL,CAAW,KAAKC,MAAhB,CAJX;;AAAA;AAAA;AAAA,uBAOQ,IAAIO,OAAJ,CAAY,UAAAC,OAAO;AAAA,yBAAIC,UAAU,CAAC;AAAA,2BAAMD,OAAO,EAAb;AAAA,mBAAD,EAAkBH,OAAlB,CAAd;AAAA,iBAAnB,CAPR;;AAAA;AAAA,iDAQS,KAAKK,WAAL,CAAiBT,KAAjB,CART;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAWA,iBAAQ;AACN,WAAKL,eAAL,GAAuB,EAAvB;AACD","sourcesContent":["export default class RateLimiter {\n  constructor({\n    tokensPerInterval,\n    interval\n  }) {\n    this.tokensPerInterval = tokensPerInterval;\n\n    if (typeof interval === 'string') {\n      switch (interval) {\n        case 'sec':\n        case 'second':\n          {\n            this.interval = 1000;\n            break;\n          }\n\n        case 'min':\n        case 'minute':\n          {\n            this.interval = 1000 * 60;\n            break;\n          }\n\n        case 'hr':\n        case 'hour':\n          {\n            this.interval = 1000 * 60 * 60;\n            break;\n          }\n\n        case 'day':\n          {\n            this.interval = 1000 * 60 * 60 * 24;\n            break;\n          }\n\n        default:\n          throw new Error('Invalid interval ' + interval);\n      }\n    } else {\n      this.interval = interval;\n    }\n\n    this.tokensRemovedAt = [];\n  }\n\n  dripTokens() {\n    throw new Error(`dripTokens() not implemented`);\n  }\n\n  getDelayForTokens() {\n    throw new Error(`getDelayForTokens() not implemented`);\n  }\n\n  getTokens() {\n    this.dripTokens();\n    return Math.floor(this.tokens);\n  }\n\n  tryRemoveTokens(count) {\n    this.dripTokens();\n    if (count > this.tokens) return false;\n    this.tokens -= count;\n    this.tokensRemovedAt.push([Date.now(), count]);\n    return true;\n  }\n\n  async awaitTokens(count = 1) {\n    let delayMs = this.getDelayForTokens(count);\n\n    if (delayMs === 0) {\n      return Math.floor(this.tokens);\n    }\n\n    await new Promise(resolve => setTimeout(() => resolve(), delayMs));\n    return this.awaitTokens(count);\n  }\n\n  reset() {\n    this.tokensRemovedAt = [];\n  }\n\n}"],"file":"rateLimiter.js"}