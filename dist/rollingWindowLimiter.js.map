{"version":3,"sources":["rollingWindowLimiter.js"],"names":["RollingWindowLimiter","tokensPerInterval","interval","tokens","now","Date","tokensRemovedAt","length","shift","count","Error","dripTokens","tokensNeeded","newTokens","delayMs","RateLimiter"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IACaA,oB;;;;;AACX,sCAGG;AAAA;;AAAA,QAFDC,iBAEC,QAFDA,iBAEC;AAAA,QADDC,QACC,QADDA,QACC;;AAAA;;AACD,8BAAM;AACJD,MAAAA,iBAAiB,EAAjBA,iBADI;AAEJC,MAAAA,QAAQ,EAARA;AAFI,KAAN;AAIA,UAAKC,MAAL,GAAc,MAAKF,iBAAnB;AALC;AAMF;;;;WAED,sBAAa;AACX,UAAMG,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;;AAEA,aAAO,KAAKE,eAAL,CAAqBC,MAArB,GAA8B,CAArC,EAAwC;AACtC,YAAI,KAAKD,eAAL,CAAqB,CAArB,EAAwB,CAAxB,IAA6B,KAAKJ,QAAlC,GAA6CE,GAAjD,EAAsD;AACpD;AACD;;AAED,aAAKD,MAAL,IAAe,KAAKG,eAAL,CAAqB,CAArB,EAAwB,CAAxB,CAAf;AACA,aAAKA,eAAL,CAAqBE,KAArB;AACD;;AAED,UAAI,KAAKL,MAAL,GAAc,KAAKF,iBAAvB,EAA0C;AACxC,aAAKE,MAAL,GAAc,KAAKF,iBAAnB;AACD;;AAED,aAAO,KAAKE,MAAZ;AACD;;;WAED,6BAA6B;AAAA,UAAXM,KAAW,uEAAH,CAAG;;AAC3B,UAAIA,KAAK,GAAG,KAAKR,iBAAjB,EAAoC;AAClC,cAAM,IAAIS,KAAJ,yBAA2BD,KAA3B,yDAA+E,KAAKR,iBAApF,EAAN;AACD;;AAED,WAAKU,UAAL;AACA,UAAIC,YAAY,GAAGH,KAAK,GAAG,KAAKN,MAAhC;;AAEA,UAAIS,YAAY,IAAI,CAApB,EAAuB;AACrB,eAAO,CAAP;AACD;;AAED,UAAMR,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;;AAZ2B,iDAcH,KAAKE,eAdF;AAAA;;AAAA;AAc3B,4DAA8C;AAAA,cAAnCO,SAAmC;AAC5CD,UAAAA,YAAY,IAAIC,SAAS,CAAC,CAAD,CAAzB;;AAEA,cAAID,YAAY,IAAI,CAApB,EAAuB;AACrB,gBAAME,OAAO,GAAGD,SAAS,CAAC,CAAD,CAAT,GAAe,KAAKX,QAApB,GAA+BE,GAA/C;AACA,mBAAOU,OAAP;AACD;AACF;AArB0B;AAAA;AAAA;AAAA;AAAA;AAsB5B;;;WAED,iBAAQ;AACN,WAAKR,eAAL,GAAuB,EAAvB;AACA,WAAKH,MAAL,GAAc,KAAKF,iBAAnB;AACD;;;;EA1DuCc,uB","sourcesContent":["import RateLimiter from './rateLimiter.js';\nexport class RollingWindowLimiter extends RateLimiter {\n  constructor({\n    tokensPerInterval,\n    interval\n  }) {\n    super({\n      tokensPerInterval,\n      interval\n    });\n    this.tokens = this.tokensPerInterval;\n  }\n\n  dripTokens() {\n    const now = Date.now();\n\n    while (this.tokensRemovedAt.length > 0) {\n      if (this.tokensRemovedAt[0][0] + this.interval > now) {\n        break;\n      }\n\n      this.tokens += this.tokensRemovedAt[0][1];\n      this.tokensRemovedAt.shift();\n    }\n\n    if (this.tokens > this.tokensPerInterval) {\n      this.tokens = this.tokensPerInterval;\n    }\n\n    return this.tokens;\n  }\n\n  getDelayForTokens(count = 1) {\n    if (count > this.tokensPerInterval) {\n      throw new Error(`Cannot supply ${count} tokens at once (max is tokensPerInterval = ${this.tokensPerInterval}`);\n    }\n\n    this.dripTokens();\n    let tokensNeeded = count - this.tokens;\n\n    if (tokensNeeded <= 0) {\n      return 0;\n    }\n\n    const now = Date.now();\n\n    for (const newTokens of this.tokensRemovedAt) {\n      tokensNeeded -= newTokens[1];\n\n      if (tokensNeeded <= 0) {\n        const delayMs = newTokens[0] + this.interval - now;\n        return delayMs;\n      }\n    }\n  }\n\n  reset() {\n    this.tokensRemovedAt = [];\n    this.tokens = this.tokensPerInterval;\n  }\n\n}"],"file":"rollingWindowLimiter.js"}