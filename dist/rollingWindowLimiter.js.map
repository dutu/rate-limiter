{"version":3,"sources":["rollingWindowLimiter.js"],"names":["RollingWindowLimiter","RateLimiter","tokensPerInterval","interval","stopped","now","Date","count","tokensNeeded","newTokens","delayMs"],"mappings":"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","sourcesContent":["import RateLimiter from './rateLimiter.js';\nexport class RollingWindowLimiter extends RateLimiter {\n  constructor({\n    tokensPerInterval,\n    interval,\n    stopped = false\n  }) {\n    super({\n      tokensPerInterval,\n      interval,\n      stopped\n    });\n    this.tokens = this.tokensPerInterval;\n  }\n\n  dripTokens() {\n    if (this._isStopped) {\n      return;\n    }\n\n    const now = Date.now();\n\n    while (this.tokensRemovedAt.length > 0) {\n      if (this.tokensRemovedAt[0][0] + this.interval > now) {\n        break;\n      }\n\n      this.tokens += this.tokensRemovedAt[0][1];\n      this.tokensRemovedAt.shift();\n    }\n\n    if (this.tokens > this.tokensPerInterval) {\n      this.tokens = this.tokensPerInterval;\n    }\n\n    return this.tokens;\n  }\n\n  getDelayForTokens(count = 1) {\n    if (count > this.tokensPerInterval) {\n      throw new Error(`Cannot supply ${count} tokens at once (max is tokensPerInterval = ${this.tokensPerInterval}`);\n    }\n\n    this.dripTokens();\n    let tokensNeeded = count - this.tokens;\n\n    if (tokensNeeded <= 0) {\n      return 0;\n    }\n\n    if (this._isStopped) {\n      return undefined;\n    }\n\n    const now = Date.now();\n\n    for (const newTokens of this.tokensRemovedAt) {\n      tokensNeeded -= newTokens[1];\n\n      if (tokensNeeded <= 0) {\n        const delayMs = newTokens[0] + this.interval - now;\n        return delayMs;\n      }\n    }\n  }\n\n  reset() {\n    this._isStopped = false;\n    this.tokensRemovedAt = [];\n    this.tokens = this.tokensPerInterval;\n    super.reset();\n  }\n\n}"],"file":"rollingWindowLimiter.js"}