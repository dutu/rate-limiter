{"version":3,"sources":["rollingWindowLimiter.js"],"names":["RollingWindowLimiter","tokensPerInterval","interval","stopped","tokens","_isStopped","now","Date","tokensRemovedAt","length","shift","count","Error","dripTokens","tokensNeeded","undefined","newTokens","delayMs","RateLimiter"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IACaA,oB;;;;;AACX,sCAIG;AAAA;;AAAA,QAHDC,iBAGC,QAHDA,iBAGC;AAAA,QAFDC,QAEC,QAFDA,QAEC;AAAA,4BADDC,OACC;AAAA,QADDA,OACC,6BADS,KACT;;AAAA;;AACD,8BAAM;AACJF,MAAAA,iBAAiB,EAAjBA,iBADI;AAEJC,MAAAA,QAAQ,EAARA,QAFI;AAGJC,MAAAA,OAAO,EAAPA;AAHI,KAAN;AAKA,UAAKC,MAAL,GAAc,MAAKH,iBAAnB;AANC;AAOF;;;;WAED,sBAAa;AACX,UAAI,KAAKI,UAAT,EAAqB;AACnB;AACD;;AAED,UAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;;AAEA,aAAO,KAAKE,eAAL,CAAqBC,MAArB,GAA8B,CAArC,EAAwC;AACtC,YAAI,KAAKD,eAAL,CAAqB,CAArB,EAAwB,CAAxB,IAA6B,KAAKN,QAAlC,GAA6CI,GAAjD,EAAsD;AACpD;AACD;;AAED,aAAKF,MAAL,IAAe,KAAKI,eAAL,CAAqB,CAArB,EAAwB,CAAxB,CAAf;AACA,aAAKA,eAAL,CAAqBE,KAArB;AACD;;AAED,UAAI,KAAKN,MAAL,GAAc,KAAKH,iBAAvB,EAA0C;AACxC,aAAKG,MAAL,GAAc,KAAKH,iBAAnB;AACD;;AAED,aAAO,KAAKG,MAAZ;AACD;;;WAED,6BAA6B;AAAA,UAAXO,KAAW,uEAAH,CAAG;;AAC3B,UAAIA,KAAK,GAAG,KAAKV,iBAAjB,EAAoC;AAClC,cAAM,IAAIW,KAAJ,yBAA2BD,KAA3B,yDAA+E,KAAKV,iBAApF,EAAN;AACD;;AAED,WAAKY,UAAL;AACA,UAAIC,YAAY,GAAGH,KAAK,GAAG,KAAKP,MAAhC;;AAEA,UAAIU,YAAY,IAAI,CAApB,EAAuB;AACrB,eAAO,CAAP;AACD;;AAED,UAAI,KAAKT,UAAT,EAAqB;AACnB,eAAOU,SAAP;AACD;;AAED,UAAMT,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;;AAhB2B,iDAkBH,KAAKE,eAlBF;AAAA;;AAAA;AAkB3B,4DAA8C;AAAA,cAAnCQ,SAAmC;AAC5CF,UAAAA,YAAY,IAAIE,SAAS,CAAC,CAAD,CAAzB;;AAEA,cAAIF,YAAY,IAAI,CAApB,EAAuB;AACrB,gBAAMG,OAAO,GAAGD,SAAS,CAAC,CAAD,CAAT,GAAe,KAAKd,QAApB,GAA+BI,GAA/C;AACA,mBAAOW,OAAP;AACD;AACF;AAzB0B;AAAA;AAAA;AAAA;AAAA;AA0B5B;;;WAED,iBAAQ;AACN,WAAKZ,UAAL,GAAkB,KAAlB;AACA,WAAKG,eAAL,GAAuB,EAAvB;AACA,WAAKJ,MAAL,GAAc,KAAKH,iBAAnB;;AACA;AACD;;;;EAtEuCiB,uB","sourcesContent":["import RateLimiter from './rateLimiter.js';\nexport class RollingWindowLimiter extends RateLimiter {\n  constructor({\n    tokensPerInterval,\n    interval,\n    stopped = false\n  }) {\n    super({\n      tokensPerInterval,\n      interval,\n      stopped\n    });\n    this.tokens = this.tokensPerInterval;\n  }\n\n  dripTokens() {\n    if (this._isStopped) {\n      return;\n    }\n\n    const now = Date.now();\n\n    while (this.tokensRemovedAt.length > 0) {\n      if (this.tokensRemovedAt[0][0] + this.interval > now) {\n        break;\n      }\n\n      this.tokens += this.tokensRemovedAt[0][1];\n      this.tokensRemovedAt.shift();\n    }\n\n    if (this.tokens > this.tokensPerInterval) {\n      this.tokens = this.tokensPerInterval;\n    }\n\n    return this.tokens;\n  }\n\n  getDelayForTokens(count = 1) {\n    if (count > this.tokensPerInterval) {\n      throw new Error(`Cannot supply ${count} tokens at once (max is tokensPerInterval = ${this.tokensPerInterval}`);\n    }\n\n    this.dripTokens();\n    let tokensNeeded = count - this.tokens;\n\n    if (tokensNeeded <= 0) {\n      return 0;\n    }\n\n    if (this._isStopped) {\n      return undefined;\n    }\n\n    const now = Date.now();\n\n    for (const newTokens of this.tokensRemovedAt) {\n      tokensNeeded -= newTokens[1];\n\n      if (tokensNeeded <= 0) {\n        const delayMs = newTokens[0] + this.interval - now;\n        return delayMs;\n      }\n    }\n  }\n\n  reset() {\n    this._isStopped = false;\n    this.tokensRemovedAt = [];\n    this.tokens = this.tokensPerInterval;\n    super.reset();\n  }\n\n}"],"file":"rollingWindowLimiter.js"}