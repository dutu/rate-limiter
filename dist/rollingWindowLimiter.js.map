{"version":3,"sources":["../test/rollingWindowLimiter.js"],"names":["expect","chai","delay","setTimeout","resolve","describe","it","limiter","RollingRateLimiter","tokensPerInterval","interval","removedTokens","tokens"],"mappings":";;AAAA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AAGA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAFA,IAAMA,MAAM,GAAGC,KAAAA,CAAAA,SAAAA,CAAAA,CAAf,MAAA;;AAIA,IAAMC,KAAK,GAAI,SAATA,KAAS,CAAA,EAAA,EAAA;AAAA,SAAQ,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA;AAAA,WAAaC,UAAU,CAAC,YAAA;AAAA,aAAMC,OAAN,EAAA;AAAD,KAAA,EAAvB,EAAuB,CAAvB;AAApB,GAAQ,CAAR;AAAf,CAAA;;AAEAC,QAAQ,CAAA,aAAA,EAAgB,YAAY;AAClCC,EAAAA,EAAE,CAAA,8BAAA,EAAiC,YAAY;AAC7C,QAAMC,OAAO,GAAG,IAAIC,MAAAA,CAAJ,SAAIA,CAAJ,CAAuB;AAAEC,MAAAA,iBAAiB,EAAnB,EAAA;AAAyBC,MAAAA,QAAQ,EAAE,KAAK;AAAxC,KAAvB,CAAhB;AACAV,IAAAA,MAAM,CAANA,OAAM,CAANA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,UAAAA,CAAoCQ,MAAAA,CAApCR,SAAoCQ,CAApCR;AAFFM,GAAE,CAAFA;AADFD,CAAQ,CAARA;AAOAA,QAAQ,CAAA,aAAA,EAAgB,YAAY;AAClCC,EAAAA,EAAE,CAAA,wCAAA,EAA2C,YAAY;AACvD,QAAMC,OAAO,GAAG,IAAIC,MAAAA,CAAJ,SAAIA,CAAJ,CAAuB;AAACC,MAAAA,iBAAiB,EAAlB,EAAA;AAAwBC,MAAAA,QAAQ,EAAE,KAAK;AAAvC,KAAvB,CAAhB;AACAV,IAAAA,MAAM,CAACO,OAAO,CAAdP,SAAOO,EAAD,CAANP,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,EAAAA;AAFFM,GAAE,CAAFA;AADFD,CAAQ,CAARA;AAOAA,QAAQ,CAAA,mBAAA,EAAsB,YAAY;AACxCC,EAAAA,EAAE,CAAA,wCAAA,EAA2C,YAAY;AACvD,QAAMC,OAAO,GAAG,IAAIC,MAAAA,CAAJ,SAAIA,CAAJ,CAAuB;AAACC,MAAAA,iBAAiB,EAAlB,EAAA;AAAwBC,MAAAA,QAAQ,EAAE,KAAK;AAAvC,KAAvB,CAAhB;AACA,QAAIC,aAAa,GAAGJ,OAAO,CAAPA,eAAAA,CAApB,CAAoBA,CAApB;AACAP,IAAAA,MAAM,CAANA,aAAM,CAANA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,IAAAA;AACAA,IAAAA,MAAM,CAACO,OAAO,CAAdP,SAAOO,EAAD,CAANP,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AAEAW,IAAAA,aAAa,GAAGJ,OAAO,CAAPA,eAAAA,CAAhBI,EAAgBJ,CAAhBI;AACAX,IAAAA,MAAM,CAANA,aAAM,CAANA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,KAAAA;AACAA,IAAAA,MAAM,CAACO,OAAO,CAAdP,SAAOO,EAAD,CAANP,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AAEAW,IAAAA,aAAa,GAAGJ,OAAO,CAAPA,eAAAA,CAAhBI,CAAgBJ,CAAhBI;AACAX,IAAAA,MAAM,CAANA,aAAM,CAANA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,IAAAA;AACAA,IAAAA,MAAM,CAACO,OAAO,CAAdP,SAAOO,EAAD,CAANP,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AAZFM,GAAE,CAAFA;AADFD,CAAQ,CAARA;AAiBAA,QAAQ,CAAA,eAAA,EAAkB,YAAY;AACpCC,EAAAA,EAAE,CAAA,qCAAA,EAAA,aAAA,iBAAA,EAAA,aAAA,kBAAA,CAAA,IAAA,CAAwC,SAAA,OAAA,GAAA;AAAA,QAAA,OAAA,EAAA,aAAA,EAAA,MAAA;AAAA,WAAA,kBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAClCC,YAAAA,OADkC,GACxB,IAAIC,MAAAA,CAAJ,SAAIA,CAAJ,CAAuB;AAACC,cAAAA,iBAAiB,EAAlB,EAAA;AAAwBC,cAAAA,QAAQ,EAAE;AAAlC,aAAvB,CAAVH;AACFI,YAAAA,aAFoC,GAEpBJ,OAAO,CAAPA,eAAAA,CAFoB,CAEpBA,CAAhBI;AACJX,YAAAA,MAAM,CAANA,aAAM,CAANA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,IAAAA;AACAA,YAAAA,MAAM,CAACO,OAAO,CAAdP,SAAOO,EAAD,CAANP,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AAJwC,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBAMlCE,KAAK,CAN6B,GAM7B,CAN6B;;AAAA,eAAA,CAAA;AAOxCS,YAAAA,aAAa,GAAGJ,OAAO,CAAPA,eAAAA,CAAhBI,CAAgBJ,CAAhBI;AACAX,YAAAA,MAAM,CAANA,aAAM,CAANA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,IAAAA;AACAA,YAAAA,MAAM,CAACO,OAAO,CAAdP,SAAOO,EAAD,CAANP,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AATwC,YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA,mBAWlCE,KAAK,CAX6B,GAW7B,CAX6B;;AAAA,eAAA,EAAA;AAYxCF,YAAAA,MAAM,CAACO,OAAO,CAAdP,SAAOO,EAAD,CAANP,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AAZwC,YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA,mBAcrBO,OAAO,CAAPA,WAAAA,CAdqB,CAcrBA,CAdqB;;AAAA,eAAA,EAAA;AAcpCK,YAAAA,MAdoC,GAAA,QAAA,CAAA,IAcpCA;AACJZ,YAAAA,MAAM,CAACO,OAAO,CAAdP,SAAOO,EAAD,CAANP,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AACAA,YAAAA,MAAM,CAANA,MAAM,CAANA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AAhBwC,YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA,mBAmBzBO,OAAO,CAAPA,WAAAA,CAnByB,CAmBzBA,CAnByB;;AAAA,eAAA,EAAA;AAmBxCK,YAAAA,MAnBwC,GAAA,QAAA,CAAA,IAmBxCA;AACAZ,YAAAA,MAAM,CAACO,OAAO,CAAdP,SAAOO,EAAD,CAANP,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,EAAAA;AACAA,YAAAA,MAAM,CAANA,MAAM,CAANA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,EAAAA;;AArBwC,eAAA,EAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,OAAA,CAAA;AAA1CM,GAAE,CAAA,CAAA,CAAFA;AADFD,CAAQ,CAARA","sourcesContent":["import chai from 'chai'\nconst expect = chai.expect\n\nimport RollingRateLimiter from '../dist/index.mjs'\n\nconst delay =  (ms) => new Promise((resolve) => setTimeout(() => resolve(), ms))\n\ndescribe(\"Constructor\", function () {\n  it('should create a new instance', function () {\n    const limiter = new RollingRateLimiter({ tokensPerInterval: 10, interval: 10 * 1000 })\n    expect(limiter).to.be.an.instanceOf(RollingRateLimiter)\n  })\n})\n\ndescribe(\"getTokens()\", function () {\n  it('should return correct number of tokens', function () {\n    const limiter = new RollingRateLimiter({tokensPerInterval: 10, interval: 10 * 1000 })\n    expect(limiter.getTokens()).to.be.equal(10)\n  })\n})\n\ndescribe(\"tryRemoveTokens()\", function () {\n  it('should remove correct number of tokens', function () {\n    const limiter = new RollingRateLimiter({tokensPerInterval: 10, interval: 10 * 1000 })\n    let removedTokens = limiter.tryRemoveTokens(2)\n    expect(removedTokens).to.be.equal(true)\n    expect(limiter.getTokens()).to.be.equal(8)\n\n    removedTokens = limiter.tryRemoveTokens(20)\n    expect(removedTokens).to.be.equal(false)\n    expect(limiter.getTokens()).to.be.equal(8)\n\n    removedTokens = limiter.tryRemoveTokens(0)\n    expect(removedTokens).to.be.equal(true)\n    expect(limiter.getTokens()).to.be.equal(8)\n  })\n})\n\ndescribe(\"awaitTokens()\", function () {\n  it('should await right number of tokens', async function () {\n    const limiter = new RollingRateLimiter({tokensPerInterval: 10, interval: 1000 })\n    let removedTokens = limiter.tryRemoveTokens(2)\n    expect(removedTokens).to.be.equal(true)\n    expect(limiter.getTokens()).to.be.equal(8)\n\n    await delay(100)\n    removedTokens = limiter.tryRemoveTokens(8)\n    expect(removedTokens).to.be.equal(true)\n    expect(limiter.getTokens()).to.be.equal(0)\n\n    await delay(800)\n    expect(limiter.getTokens()).to.be.equal(0)\n\n    let tokens = await limiter.awaitTokens(2)\n    expect(limiter.getTokens()).to.be.equal(2)\n    expect(tokens).to.be.equal(2)\n\n\n    tokens = await limiter.awaitTokens(8)\n    expect(limiter.getTokens()).to.be.equal(10)\n    expect(tokens).to.be.equal(10)\n  })\n})\n\n"],"file":"rollingWindowLimiter.js"}