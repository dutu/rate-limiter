{"version":3,"sources":["../src/limiter.js"],"names":["Limiter","tokensPerInterval","interval","Math","count","Date","delayMs","setTimeout","resolve"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAqBA,O;AACnB,WAAA,OAAA,CAAA,IAAA,EAA8C;AAAA,QAA/BC,iBAA+B,GAAA,IAAA,CAA/BA,iBAA+B;AAAA,QAAZC,QAAY,GAAA,IAAA,CAAZA,QAAY;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,CAAA;;AAC5C,SAAA,iBAAA,GAAA,iBAAA;;AACA,QAAI,OAAA,QAAA,KAAJ,QAAA,EAAkC;AAChC,cAAA,QAAA;AACE,aAAA,KAAA;AACA,aAAA,QAAA;AAAe;AACb,iBAAA,QAAA,GAAA,IAAA;AACA;AACD;;AAED,aAAA,KAAA;AACA,aAAA,QAAA;AAAe;AACb,iBAAA,QAAA,GAAgB,OAAhB,EAAA;AACA;AACD;;AAED,aAAA,IAAA;AACA,aAAA,MAAA;AAAa;AACX,iBAAA,QAAA,GAAgB,OAAA,EAAA,GAAhB,EAAA;AACA;AACD;;AAED,aAAA,KAAA;AACA;AACE,iBAAA,QAAA,GAAgB,OAAA,EAAA,GAAA,EAAA,GAAhB,EAAA;AACA;AACD;;AAED;AACE,gBAAM,IAAA,KAAA,CAAU,sBAAhB,QAAM,CAAN;AA1BJ;AADF,KAAA,MA6BO;AACL,WAAA,QAAA,GAAA,QAAA;AACD;;AAED,SAAA,eAAA,GAAA,EAAA;AACD;;;;iCAEY;AACX,YAAM,IAAA,KAAA,CAAN,8BAAM,CAAN;AACD;;;wCAEmB;AAClB,YAAM,IAAA,KAAA,CAAN,qCAAM,CAAN;AACD;;;gCAEW;AACV,WAAA,UAAA;AACA,aAAOC,IAAI,CAAJA,KAAAA,CAAW,KAAlB,MAAOA,CAAP;AACD;;;oCAEeC,K,EAAO;AACrB,WAAA,UAAA;AACA,UAAIA,KAAK,GAAG,KAAZ,MAAA,EAAyB,OAAA,KAAA;AACzB,WAAA,MAAA,IAAA,KAAA;AACA,WAAA,eAAA,CAAA,IAAA,CAA0B,CAACC,IAAI,CAAL,GAACA,EAAD,EAA1B,KAA0B,CAA1B;AACA,aAAA,IAAA;AACD;;;;;;;;;;;;AAEiBD,gBAAAA,K,2DAAAA,CAAAA;AACZE,gBAAAA,O,GAAU,KAAA,iBAAA,CAAVA,KAAU,CAAVA;;sBACAA,OAAO,KAAK,C;;;;;iDACPH,IAAI,CAAJA,KAAAA,CAAW,KAAXA,MAAAA,C;;;;uBAGH,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA;AAAA,yBAAaI,UAAU,CAAC,YAAA;AAAA,2BAAMC,OAAN,EAAA;AAAD,mBAAA,EAAvB,OAAuB,CAAvB;AAAZ,iBAAA,C;;;iDACC,KAAA,WAAA,CAAA,KAAA,C","sourcesContent":["export default class Limiter {\r\n  constructor ({ tokensPerInterval, interval }) {\r\n    this.tokensPerInterval = tokensPerInterval\r\n    if (typeof interval === 'string') {\r\n      switch (interval) {\r\n        case 'sec':\r\n        case 'second': {\r\n          this.interval = 1000\r\n          break\r\n        }\r\n\r\n        case 'min':\r\n        case 'minute': {\r\n          this.interval = 1000 * 60\r\n          break\r\n        }\r\n\r\n        case 'hr':\r\n        case 'hour': {\r\n          this.interval = 1000 * 60 * 60\r\n          break\r\n        }\r\n\r\n        case 'day':\r\n        {\r\n          this.interval = 1000 * 60 * 60 * 24\r\n          break\r\n        }\r\n\r\n        default:\r\n          throw new Error('Invalid interval ' + interval);\r\n      }\r\n    } else {\r\n      this.interval = interval\r\n    }\r\n\r\n    this.tokensRemovedAt = []\r\n  }\r\n\r\n  dripTokens() {\r\n    throw new Error(`dripTokens() not implemented`)\r\n  }\r\n\r\n  getDelayForTokens() {\r\n    throw new Error(`getDelayForTokens() not implemented`)\r\n  }\r\n\r\n  getTokens() {\r\n    this.dripTokens()\r\n    return Math.floor(this.tokens)\r\n  }\r\n\r\n  tryRemoveTokens(count) {\r\n    this.dripTokens()\r\n    if (count > this.tokens) return false\r\n    this.tokens -= count\r\n    this.tokensRemovedAt.push([Date.now(), count])\r\n    return true\r\n  }\r\n\r\n  async awaitTokens(count = 1) {\r\n    let delayMs = this.getDelayForTokens(count)\r\n    if (delayMs === 0) {\r\n      return Math.floor(this.tokens)\r\n    }\r\n\r\n    await new Promise((resolve) => setTimeout(() => resolve(), delayMs))\r\n    return this.awaitTokens(count)\r\n  }\r\n}\r\n\r\n"],"file":"limiter.js"}